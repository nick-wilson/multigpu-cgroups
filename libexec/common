if [ x"$libexec" == x ] ; then source /usr/local/etc/dgx-cgroup ; fi
# cannot rely on HOST environment variable
hostname=`hostname`

logging (){
 timestamp=`date +%Y%m%d%H%M%S`
 logger -p user.info "$1"
 echo "$hostname $timestamp $1" >> /var/log/dgx-cgroup
}

write_gpu_assignment(){
 echo unset gpu_status gpu_cgroup gpu_user > "$map_gpu"
 echo declare -a gpu_status gpu_cgroup gpu_user >> "$map_gpu"
 echo gpu_status=\(${gpu_status[*]}\) >> "$map_gpu"
 echo gpu_cgroup=\(${gpu_cgroup[*]}\) >> "$map_gpu"
 echo gpu_user=\(${gpu_user[*]}\) >> "$map_gpu"
}

reset_gpu_assignment(){
 unset gpu_status gpu_cgroup gpu_user
 declare -a gpu_status gpu_cgroup gpu_user
 for i in {0..7} ; do gpu_status[$i]=A ; gpu_cgroup[$i]=NA ; gpu_user[$i]=NA ; done
 write_gpu_assignment
}

if [ ! -d "$rundir" ] ; then mkdir "$rundir" || { logging "cgroup error creating $rundir" ; exit 1 ; } ; fi
if [ ! -f "$map_gpu" ] ; then reset_gpu_assignment ; fi

assign_gpus(){
if [ $# -ne 3 ] ; then { logging "cgroup error assign GPU arguments $@"  ; exit 1 ; } ; fi
_cgroup="$1"
_ngpus="$2"
_user="$3"
_required="$_ngpus"
_gpus=""
if [ ! -f "$map_gpu" ] ; then reset_gpu_assignment ; fi
source "$map_gpu"
for i in {0..7} ; do
 if [ $_required -eq 0 ] ; then break ; fi
 if [ "${gpu_status[$i]}" == A ] ; then
  gpu_status[$i]="B"
  gpu_cgroup[$i]="$_cgroup"
  gpu_user[$i]="$_user"
  _gpus="$_gpus $i"
  _required=`expr $_required - 1`
 fi
done
if [ $_required -gt 0 ] ; then { logging "cgroup error assign could not find enough GPUs"  ; exit 1 ; } ; fi
write_gpu_assignment
echo $_gpus
}

release_gpus(){
if [ $# -ne 1 ] ; then { logging "cgroup error release GPU arguments $@"  ; exit 1 ; } ; fi
_cgroup="$1"
if [ ! -f "$map_gpu" ] ; then { logging "cgroup error release no map file" ; exit 1 ; } ; fi
source "$map_gpu"
for i in {0..7} ; do
 if [ "${gpu_cgroup[$i]}" == "$_cgroup" ] ; then
  gpu_status[$i]="A"
  gpu_cgroup[$i]="NA"
  gpu_user[$i]="NA"
 fi
done
write_gpu_assignment
}

cgroup_create(){
 if [ $# -lt 3 ] ; then { logging "cgroup create error arguments $@"  ; exit 1 ; } ; fi
 _cgroup=$1
 shift
 if [ -d /sys/fs/cgroup/devices/$_cgroup ] ; then logging "cgroup exists $_cgroup" ; fi
 _ngpus=$1
 shift
 _uid=$1
 shift
 _gpus="$@"
 if [ $# -ne $_ngpus ] ; then { logging "cgroup error creating ${_cgroup} arguments ${_cgroup:-NA} ${_uid:-NA} ${_ngpus:-NA} ${_gpus:-NA}" ; exit 1 ; } ; fi
 logging "cgroup create $_cgroup for user ${_uid:-NA} with ${_ngpus:-NA} gpus ${_gpus:-NA}"
 # create cgroup with permission for user to add tasks
 cgcreate -g "devices:/$_cgroup" -d 755 -t $_uid || { logging "cgroup error cgcreate ${_cgroup}" ; exit 1 ; }
 # first deny all
 for i in {0..7} ;do cgset -r devices.deny="c 195:$i rw" /$_cgroup ; done
 # then allow GPUs for job
 for i in $_gpus ;do cgset -r devices.allow="c 195:$i rw" /$_cgroup ; done
}

cgroup_create_allgpu(){
 _cgroup="allgpu"
 if [ -d /sys/fs/cgroup/devices/$_cgroup ] ; then return ; fi
 cgcreate -g devices:/$_cgroup -d 755 --tperm 0775 -t root:nscc-proj || { logging "cgroup error cgcreate $_cgroup" ; exit 1 ; }
}
cgroup_create_allgpu

cgroup_create_nogpu(){
 _cgroup="nogpu"
 if [ -d /sys/fs/cgroup/devices/$_cgroup ] ; then return ; fi
 cgcreate -g devices:/$_cgroup -d 755 --tperm 0666 || { logging "cgroup error cgcreate $_cgroup" ; exit 1 ; }
 for i in {0..7} ;do cgset -r devices.deny="c 195:$i rw" /$_cgroup ; done
}
cgroup_create_nogpu

cgroup_classify(){
 _cgroup=$1
 shift
 logging "cgroup ${_cgroup:-NA} classify processes ${@:-NA}"
 cgclassify -g "devices:/$_cgroup" $@
}

cgroup_remove(){
 if [ $# -ne 1 ] ; then { logging "cgroup remove error arguments $@"  ; return 1 ; } ; fi
 _cgroup="$1"
 for _g in allgpu nogpu ; do if [ x"$_cgroup" == x"$_g" ] ; then { logging "cgroup skipping delete $_g"  ; return 0 ; } ; fi  ; done
 release_gpus "$_cgroup"
 cgroup_create_nogpu
 nogpu=nogpu
 cgclassify -g devices:/$nogpu $(</sys/fs/cgroup/devices/$_cgroup/tasks)
 logging "cgroup delete $_cgroup" 
 cgdelete -g devices:/$_cgroup
}
