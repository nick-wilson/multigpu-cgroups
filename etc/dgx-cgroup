libexec=/usr/local/libexec/dgx-cgroup
rundir=/var/run/dgx-cgroup
map_gpu="$rundir/map-gpu"
lock="$undir/lock"

logging (){
 timestamp=`date +%Y%m%d%H%M%S`
 # hostname not in PBS environment variables
 hostname=`hostname`
 logger -p user.info "$1"
 echo "$hostname $timestamp $1" >> /var/log/dgx-cgroup
}

if [ ! -d "$rundir" ] ; then mkdir "$rundir" || { logging "cgroup error creating $rundir" ; exit 1 ; } ; fi
if [ ! -f "$map_gpu" ] ; then
cat << EOF > "$map_gpu"
#ID STATUS JOB
0,A,NA
1,A,NA
2,A,NA
3,A,NA
4,A,NA
5,A,NA
6,A,NA
7,A,NA
EOF
fi

assign_gpus(){
if [ $# -ne 2 ] ; then { logging "cgroup error assign GPU arguments $@"  ; exit 1 ; } ; fi
myid="$1"
shift
myngpus="$2"
mygpus=""
echo $mygpus
}

release_gpus(){
for g in "$@" ; do
 echo sed -i 's/^${g},.*/^${g},A,NA/' $map_gpu
done
}

cgroup_create(){
 if [ $# -lt 3 ] ; then { logging "cgroup error arguments $@"  ; exit 1 ; } ; fi
 mycgroup=$1
 if [ -d /sys/fs/cgroup/devices/$mycgroup ] ; then logging "cgroup exists $mycgroup" ; fi
 shift
 myid=$1
 shift
 ngpus=$1
 shift
 mygpus="$@"
 if [ $# -ne $ngpus ] ; then { logging "cgroup error creating ${mycgroup} arguments ${mycgroup:-NA} ${myid:-NA} ${ngpus:-NA} ${mygpus:-NA}" ; exit 1 ; } ; fi
 logging "cgroup create $mycgroup for ID ${myid:-NA} with ${ngpus:-NA} gpus ${@:-NA}"
 # create cgroup with permission for user to add tasks
 cgcreate -g "devices:/$mycgroup" -t $myid || { logging "cgroup error cgcreate ${mycgroup}" ; exit 1 ; }
 # first deny all
 for i in {0..7} ;do cgset -r devices.deny="c 195:$i rw" /$mycgroup ; done
 # then allow GPUs for job
 for i in $mygpus ;do cgset -r devices.allow="c 195:$i rw" /$mycgroup ; done
}

cgroup_classify(){
 mycgroup=$1
 shift
 logging "cgroup ${mycgroup:-NA} classify processes ${@:-NA}"
 for mypid in "$@" ; do
  cgclassify -g "devices:/$mycgroup" $mypid
 done
}
